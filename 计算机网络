较小的mss可以避免拥塞，较大的mss避免分片

历史连接很有可能在新连接的接受窗口范围内

`FIN_WAIT2` 状态不可以持续太久，存在默认时常，一般60s，超时直接close

**TTL 的值一般是 64，Linux 将 MSL 设置为 30 秒，意味着 Linux 认为数据报文经过 64 个路由器的时间不会超过 30 秒，如果超过了，就认为报文已经消失在网络中了**。Maximum Segment Lifetime，**报文最大生存时间**

**ACK 报文是不会有重传的，当 ACK 丢失了，就由对方重传对应的报文**

这个模式就叫**累计确认**或者**累计应答**。

窗口大小就是指**无需等待确认应答，而可以继续发送数据的最大值**。

窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。

滑动窗口的目的是提供数据传输的流量控制和更高效的网络利用,通过窗口大小调节发送方发送的数据量。2. 流量控制的目的是防止接收方缓冲区溢出,通过反馈信号调节发送方发送速率。两者互相补充:- 滑动窗口控制发送方短时间内发送的数据量。流量控制控制长时间平均发送速率。- 滑动窗口需要接收方缓冲区足够大。流量控制可以在缓冲区小时起作用。- 流量控制依赖滑动窗口及时传递反馈信号。

流量控制是避免「发送方」的数据填满「接收方」的缓存

**拥塞控制**，控制的目的就是**避免「发送方」的数据填满整个网络**

校验和TCP 对头部和数据进行校验和计算,用于检查数据在传输过程中的完整性。

保证TCP可靠：序列号确认号保证不乱序不重复不丢包，丢失超时重传。校验和保证数据完整。

流量控制通过接收方处理能力调整发送方发送速度，防止来不及处理沾满缓存区丢包

拥塞控制防止网络环境问题丢包。（慢开始，拥塞避免，块重传与快恢复）

发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个

**ARP 表、广播问询、单播响应**。

当两个消息的某个部分内容被分到同一个 TCP 报文时，就是我们常说的 TCP 粘包问题，这时接收方不知道消息的边界的话，是无法读出有效的消息。

http协议

主要包含以下方面:1. 请求消息格式:客户端发送请求给服务器的格式,包括请求行、请求头部等。2. 响应消息格式:服务器回馈客户端的格式,包括状态行、响应头部等。3. 请求方法:GET、POST等不同的请求动词。4. 状态码:200、404等不同的响应状态码含义。5. 连接方式:支持持久连接和短连接。6. 流传输:支持将网页以数据流的形式传输。7. 通信过程:打开和关闭连接的交互步骤。

混合加密，摘要算法（保证消息没有被篡改），ca证书（保证来源正确）

摘要算法：对内容算出一个哈希值作为指纹，哈希值没法推导出内容，但是没法保证内容和哈希值没有同时被中间人换

所以又使用数字签名算法（私钥加密公钥解密）确认消息身份，给哈希值加秘

但这样没办法保证最开始的消息来源就是假的（公私钥就是假的（客户端收到的公钥就是假服务的））



http1.1 没有头部压缩，对头阻塞，只能浏览器发请求服务器响应，（管道传输解决了请求得队头阻塞没解决相应得）

http2.0 头部压缩，stream并发传输，客户端主动推送（客户端请求html，服务端主动推送css），但仍然有对头阻塞，不过是在tcp

​		hpack二进制格式，接收方可以直接解析





